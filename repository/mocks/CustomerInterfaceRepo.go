// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/rmfachran/miniproject2/entity"
	mock "github.com/stretchr/testify/mock"
)

// CustomerInterfaceRepo is an autogenerated mock type for the CustomerInterfaceRepo type
type CustomerInterfaceRepo struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: customer
func (_m *CustomerInterfaceRepo) CreateCustomer(customer *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(customer)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) (*entity.Customer, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(*entity.Customer) *entity.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id, customer
func (_m *CustomerInterfaceRepo) DeleteById(id uint, customer *entity.Customer) error {
	ret := _m.Called(id, customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *entity.Customer) error); ok {
		r0 = rf(id, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerByEmail provides a mock function with given fields: email
func (_m *CustomerInterfaceRepo) GetCustomerByEmail(email string) (*entity.Customer, error) {
	ret := _m.Called(email)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Customer, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Customer); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: id
func (_m *CustomerInterfaceRepo) GetCustomerById(id uint) (*entity.Customer, error) {
	ret := _m.Called(id)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomerById provides a mock function with given fields: id, customer
func (_m *CustomerInterfaceRepo) UpdateCustomerById(id uint, customer *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(id, customer)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *entity.Customer) (*entity.Customer, error)); ok {
		return rf(id, customer)
	}
	if rf, ok := ret.Get(0).(func(uint, *entity.Customer) *entity.Customer); ok {
		r0 = rf(id, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *entity.Customer) error); ok {
		r1 = rf(id, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerInterfaceRepo creates a new instance of CustomerInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerInterfaceRepo(t mockConstructorTestingTNewCustomerInterfaceRepo) *CustomerInterfaceRepo {
	mock := &CustomerInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
